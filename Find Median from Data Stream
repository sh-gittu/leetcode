/***
Uses array but Sorting the array every time you call findMedian() can be inefficient, especially when the array size grows large. 
consider using a more advanced data structure like a balanced binary search tree, two heaps, or a sorted linked list for more 
efficient median calculation
***/

class MedianFinder {
public:
    vector<int> arr;
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        arr.push_back(num);
    }
    
    double findMedian() {
        int n = arr.size();
        sort(arr.begin(), arr.end());
        if(n%2!=0)
            return arr[n/2];
        double val = arr[n/2-1]+arr[n/2];
        return val/2;
    }
};

/*** Using Two heaps to store: a max heap to store the smaller half of the numbers and a min heap to store the larger half.
By balancing the heaps so that their size differs by at most one, we ensure that we either have a single middle element when the
combined size is odd (this will be at the top of the larger heap), or two middle elements when the combined size is even 
(the top of each heap).   ****/

class MedianFinder {
public:
    priority_queue<int, vector<int>, greater<int>> minhp;  //stores larger half
    priority_queue<int> maxhp; //stores smaller half

    MedianFinder() {       }
    
    void addNum(int num) {  //Olog(n)
        maxhp.push(num);
        minhp.push(maxhp.top());
        maxhp.pop();

        if(maxhp.size()< minhp.size()) {
            maxhp.push(minhp.top());
            minhp.pop();
        }
        cout<<maxhp.top()<<" , "<<minhp.top()<<endl;
    }
    
    double findMedian() {  //O(1)
        if(maxhp.size()== minhp.size())
            return (maxhp.top()+minhp.top())/2.0;
        return maxhp.top();
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */










