/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* cloneGraph(Node* node) {
        if(node==nullptr)
            return nullptr;        
        unordered_map<Node*, Node*> visited;
        queue<Node*> q;
        q.push(node);
        visited[node] = new Node(node->val);

        while(!q.empty()) {
            Node* temp = q.front();
            q.pop();

            for(Node* i: temp->neighbors) {

                if(visited.find(i)==visited.end()) {
                    Node* n = new Node(i->val);
                    visited[i]=n;
                    q.push(i);
                }
                visited[temp]->neighbors.push_back(visited[i]); //.push_back(i) is wrong as i is 
                //the current node and we want to push cloned ones of current nodes
            }
        }
        return visited[node];
    }
};
