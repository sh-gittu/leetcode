class Solution {
public:
    void solve(int i, int j, char ch, int prev, vector<vector<int>>& heights) {
        if(i<0 or j<0 or i>=m or j>=n) 
            return ;
        if(heights[i][j]<prev)
            return ;
        if(ch==dp[i][j] or dp[i][j]=='B')
            return ;

        if(dp[i][j]=='\0')
            dp[i][j]=ch;
        else
            dp[i][j]='B';

        solve(i-1, j, ch, heights[i][j], heights);
        solve(i, j-1, ch, heights[i][j], heights);
        solve(i+1, j, ch, heights[i][j], heights);
        solve(i, j+1, ch, heights[i][j], heights);
    }
    vector<vector<char>> dp;
    int m,n;
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        m = heights.size();
        n = heights[0].size();
        
        dp = vector<vector<char>>(m, vector<char>(n,'\0'));
        for(int i=0; i<m; i++) {
            solve(i, 0, 'P', heights[i][0], heights);
            solve(i, n-1, 'A', heights[i][n-1], heights);
        }
        for(int i=0; i<n; i++) {
            solve(0,i, 'P', heights[0][i], heights);
            solve(m-1, i, 'A', heights[m-1][i], heights);
        }
        vector<vector<int>> ans;
        for(int i=0;i<m;i++) {
            for(int j=0; j<n;j++) {
                if(dp[i][j]=='B')
                    ans.push_back({i,j});
            }
        }
        return ans;
    }
};
